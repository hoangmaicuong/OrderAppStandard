@using System.Configuration;
@{
    ViewBag.Title = "bảng danh sách đơn hàng hiện tại";
}
@section css_header{
    <style>
        .order-card {
            transition: all 0.3s ease;
        }

            .order-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(0,0,0,0.15);
            }

        .status-pending {
            background: linear-gradient(135deg, #fee2e2, #ef4444);
        }

        .status-preparing {
            background: linear-gradient(135deg, #fef2f2, #dc2626);
        }

        .status-ready {
            background: linear-gradient(135deg, #f0fdf4, #16a34a);
        }

        .status-served {
            background: linear-gradient(135deg, #f9fafb, #6b7280);
        }

        .stats-card {
            background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%);
        }
    </style>
}
@section scripts_header{
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        const context = {
            tableId: '@ViewBag.TableId',
            tableToken: '@ViewBag.TableToken',
            imagePath: '@ConfigurationManager.AppSettings["ProductImageUploadPath"]'
        }
    </script>
}
<div class="section">
    <!-- Header -->
    <div class="bg-white rounded-2xl shadow-lg p-6 mb-6">
        <div class="flex flex-col md:flex-row md:items-center md:justify-between">
            <div>
                <h1 class="text-3xl font-bold text-gray-800 mb-2">Bàn số 5</h1>
                @*<p class="text-gray-600">Khu vực: Tầng 1 - VIP</p>*@
            <p class="text-gray-600">
                Chi tiết và trạng thái của những đơn hàng đã đặt cho bàn này.
            </p>
            </div>
            @*<div class="mt-4 md:mt-0">
                <span class="inline-flex items-center px-4 py-2 bg-green-100 text-green-800 rounded-full text-sm font-medium">
                    Đang phục vụ
                </span>
            </div>*@
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="grid grid-cols-2 gap-4 mb-6">
        <div class="stats-card rounded-xl p-4 text-white">
            <div class="text-2xl font-bold" ng-bind-html="methods.calculateOrdersTotal(data.orders) | vnCurrency"></div>
            <div class="text-sm opacity-90">Tổng tiền</div>
        </div>
        <div class="bg-gradient-to-r from-red-500 to-red-600 rounded-xl p-4 text-white">
            <div class="text-2xl font-bold" id="totalItems" ng-bind-html="methods.calculateOrderDetailsCount(data.orders) | vnNumber"></div>
            <div class="text-sm opacity-90">Tổng món</div>
        </div>
    </div>

    <!-- Orders List -->
    <div class="space-y-4" id="ordersList">
        <!-- Order 1 -->
        <div ng-repeat="order in data.orders" ng-show="order.isFinish != true" class="order-card bg-white rounded-2xl shadow-lg overflow-hidden">
            <div class="p-6">
                <div class="flex flex-col md:flex-row md:items-center md:justify-between mb-4">
                    <h3 class="text-lg font-semibold text-gray-800" ng-bind-html="'Đơn hàng #' + order.orderId"></h3>
                    <div class="flex items-center space-x-2 mt-2 md:mt-0">
                        <span ng-bind-html="methods.getOrderStatus(order)"
                              class="status-preparing text-red-800 px-3 py-1 rounded-full text-sm font-medium">
                        </span>
                        <span class="text-sm text-gray-500" ng-bind-html="methods.getHourMinute(order.orderDate)"></span>
                    </div>
                </div>

                <div class="space-y-3">
                    <!-- Item 1 -->
                    <div ng-repeat="detail in order.orderDetails" class="flex items-center space-x-4 p-3 bg-gray-50 rounded-xl">
                        @*<div class="w-16 h-16 bg-gradient-to-br from-red-400 to-pink-500 rounded-lg flex items-center justify-center text-white text-sm font-bold">
                            BÒ
                        </div>*@
                        <img ng-src="{{detail.fileId ? data.support.imagePath + detail.fileId : '/assets/img/blank-image.png'}}" style="width: 100px; height: 100px; border-radius: 5px; object-fit: cover; " alt="">
                        <div class="flex-1">
                            <h4 class="font-medium text-gray-800" ng-bind="detail.productName"></h4>
                            <p class="text-sm text-gray-600" ng-bind-html="detail.orderDetailNote || '<i class=\'fa-light fa-pen\'></i> Không có ghi chú'"></p>
                            <div class="flex items-center justify-between mt-1">
                                <span class="text-sm text-gray-500" ng-bind="'SL: ' + detail.orderDetailQuantity"></span>
                                <span class="font-semibold text-gray-800" ng-bind-html="detail.productPrice | vnCurrency"></span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="mt-4 pt-4 border-t border-gray-200">
                    <div class="flex justify-between items-center mb-3">
                        <span class="text-gray-600">Tổng đơn:</span>
                        <span class="text-xl font-bold text-gray-800" ng-bind-html="methods.calculateOrderTotal(order) | vnCurrency" ></span>
                    </div>
                    <button ng-click="events.onChangeStatusToFinish(order, $event)"
                            ng-show="order.isDelivered == true && order.isInProcess == true && order.isConfirm == true"
                            class="w-full bg-gray-300 hover:bg-gray-400 text-gray-800 py-2 px-4 rounded-lg font-medium transition-colors">
                        Hoàn thành và bỏ đơn ra khỏi bàn
                    </button>
                </div>
            </div>
        </div>

        
    </div>

    <!-- Action Buttons -->
    @*<div class="mt-8 flex flex-col md:flex-row gap-4">
        <button class="flex-1 bg-gradient-to-r from-red-500 to-red-600 text-white py-4 px-6 rounded-xl font-semibold hover:from-red-600 hover:to-red-700 transition-all duration-300 shadow-lg">
            Thêm đơn hàng
        </button>
        <button class="flex-1 bg-gradient-to-r from-gray-500 to-gray-600 text-white py-4 px-6 rounded-xl font-semibold hover:from-gray-600 hover:to-gray-700 transition-all duration-300 shadow-lg">
            Làm trống bàn
        </button>
    </div>*@
</div>
@section scripts_footer {
    <script>
        
        // Thêm hiệu ứng click cho các nút
        document.querySelectorAll('button').forEach(button => {
            button.addEventListener('click', function (e) {
                // Tạo hiệu ứng ripple
                const ripple = document.createElement('span');
                const rect = this.getBoundingClientRect();
                const size = Math.max(rect.width, rect.height);
                const x = e.clientX - rect.left - size / 2;
                const y = e.clientY - rect.top - size / 2;

                ripple.style.width = ripple.style.height = size + 'px';
                ripple.style.left = x + 'px';
                ripple.style.top = y + 'px';
                ripple.classList.add('ripple');

                this.appendChild(ripple);

                setTimeout(() => {
                    ripple.remove();
                }, 600);
            });
        });
    </script>
    <script>
        (function () { function c() { var b = a.contentDocument || a.contentWindow.document; if (b) { var d = b.createElement('script'); d.innerHTML = "window.__CF$cv$params={r:'98769ea7f02d09c4',t:'MTc1OTI2NTcxMS4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);"; b.getElementsByTagName('head')[0].appendChild(d) } } if (document.body) { var a = document.createElement('iframe'); a.height = 1; a.width = 1; a.style.position = 'absolute'; a.style.top = 0; a.style.left = 0; a.style.border = 'none'; a.style.visibility = 'hidden'; document.body.appendChild(a); if ('loading' !== document.readyState) c(); else if (window.addEventListener) document.addEventListener('DOMContentLoaded', c); else { var e = document.onreadystatechange || function () { }; document.onreadystatechange = function (b) { e(b); 'loading' !== document.readyState && (document.onreadystatechange = e, c()) } } } })();
    </script>

    <script>
        app.controller("mainCtrl", function ($scope, $http) {
            $scope.data = {
                support: {
                    imagePath: context.imagePath,
                    companySlug: context.companySlug
                }
            }

            $scope.init = function () {
                let tableId = Number(context.tableId ?? 0);
                $scope.methods.loadInit(tableId, context.tableToken);
            };

            $scope.events = {
                onChangeStatusToFinish: async function (order, $event) {
                    const button = $event.currentTarget;
                    shareData.loadButton.loading(button, true);

                    let result = false;
                    result = await $scope.methods.changeStatusToFinish(order.orderId);
                    if (result) {
                        // Xóa order khỏi danh sách
                        const index = $scope.data.orders.indexOf(order);
                        if (index !== -1) {
                            $scope.data.orders.splice(index, 1);
                        }
                        $scope.$apply();
                    }
                    shareData.loadButton.loaded(button);
                },
            };
            $scope.methods = {
                loadInit: function (tableId, tableToken, button) {
                    $http({
                        url: `/api/admin/table/get-order-of-table?tableId=${tableId}&tableToken=${tableToken}`,
                        method: "Get"
                    })
                    .then(function (response) {
                        //console.log('data', response.data);
                        let orders = response.data.orders.map(function (order) {
                            return {
                                ...order,
                                orderDetails: response.data.orderDetails.filter(d => d.orderId === order.orderId)
                            };
                        });

                        $scope.data.orders = orders;
                    })
                    .catch(function (response) {
                        shareData.notification.exception();
                        console.error('catch error', response);
                    })
                    .finally(function () {
                        if (button != null) {
                            shareData.loadButton.loaded(button);
                        }
                    });
                },
                changeStatusToFinish: async function (orderId) {
                    return await $http({
                        url: '/api/admin/order/change-status-to-finish?orderId=' + orderId,
                        method: "Post"
                    })
                    .then(function (response) {
                        if (response.data.success == true) {
                            return true;
                        }
                        else {
                            shareData.notification.fail(response.data.messageForUser)
                            console.error('response error', response)
                        }
                        return false;
                    })
                    .catch(function (response) {
                        shareData.notification.exception();
                        console.error('catch error', response);
                    })
                    .finally(function () {

                    });
                },
                calculateOrderTotal: function (order) {
                    if (!order || !order.orderDetails) return 0;
                    return order.orderDetails.reduce(function (total, detail) {
                        return total + (detail.productPrice * detail.orderDetailQuantity);
                    }, 0);
                },
                calculateOrdersTotal: function (orders) {
                    if (!orders || !orders.length) return 0;
                    return orders.reduce(function (grandTotal, order) {
                        return grandTotal + (order.orderDetails || []).reduce(function (total, detail) {
                            return total + (detail.productPrice * detail.orderDetailQuantity);
                        }, 0);
                    }, 0);
                },
                calculateOrderDetailsCount: function (orders) {
                    if (!orders || !orders.length) return 0;
                    return orders.reduce(function (count, order) {
                        return count + (order.orderDetails ? order.orderDetails.length : 0);
                    }, 0);
                },
                getHourMinute: function (date) {
                    if (!(date instanceof Date)) {
                        date = new Date(date); // ép nếu là chuỗi hoặc timestamp
                    }
                    let hours = date.getHours().toString().padStart(2, '0');
                    let minutes = date.getMinutes().toString().padStart(2, '0');
                    return `${hours}:${minutes}`;
                },
                getOrderStatus: function (order) {
                    if (order.isFinish) return "Hoàn tất";
                    if (order.isDelivered) return "Đã giao";
                    if (order.isInProcess) return "Đang chuẩn bị";
                    if (order.isConfirm) return "Đã xác nhận";
                    return "Chờ xác nhận";
                }
            };
            $scope.init();
        });
    </script>
}
