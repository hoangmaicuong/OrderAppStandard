@using System.Configuration;

@{
    ViewBag.Title = "Đơn hàng Version 2";
}
@section css_header{
    <style>

        .orders-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 24px;
        }

        .order-card {
            background: white;
            border-radius: 16px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
            transition: all 0.3s ease;
            padding: 20px;
        }

            .order-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 30px rgba(0,0,0,0.12);
            }

        .order-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 16px;
        }

        .order-info h3 {
            font-weight: bold;
            font-size: 1.125rem;
            color: #1f2937;
            margin: 0 0 4px 0;
        }

        .order-info p {
            color: #6b7280;
            font-size: 0.875rem;
            margin: 0;
            display: flex;
            align-items: center;
        }

        .table-icon {
            width: 16px;
            height: 16px;
            margin-right: 4px;
        }

        .table-number {
            font-weight: bold;
            color: #dc2626;
            font-size: 1.125rem;
        }

        .status-badge {
            color: white;
            padding: 4px 12px;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .table-number-red {
            color: #dc2626;
        }

        .table-number-black {
            color: #1f2937;
        }

        .status-pending {
            background: linear-gradient(135deg, #dc2626, #991b1b);
        }

        .status-finish {
            background: linear-gradient(135deg, #787878, #e5e5e5);
        }

        .status-confirmed {
            background: linear-gradient(135deg, #dc2626, #b91c1c);
        }

        .status-preparing {
            background: linear-gradient(135deg, #f87171, #dc2626);
        }

        .status-ready {
            background: linear-gradient(135deg, #dc2626, #991b1b);
        }

        .status-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background-color: white;
            animation: pulse 2s infinite;
        }

        @@keyframes pulse {
            0%, 100% {
                opacity: 1;
            }

            50% {
                opacity: 0.5;
            }
        }

        .time-info {
            display: flex;
            align-items: center;
            color: #6b7280;
            font-size: 0.875rem;
            margin-bottom: 16px;
        }

        .time-icon {
            width: 16px;
            height: 16px;
            margin-right: 4px;
        }

        .progress-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 8px;
            margin-bottom: 16px;
        }

        .progress-step {
            text-align: center;
        }

        .progress-circle {
            width: 32px;
            height: 32px;
            margin: 0 auto 4px auto;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.75rem;
            color: white;
        }

        .progress-text {
            font-size: 0.75rem;
            font-weight: 500;
        }

        .step-active-yellow .progress-circle {
            background-color: #fca5a5;
        }

        .step-active-yellow .progress-text {
            color: #ef4444;
        }

        .step-active-blue .progress-circle {
            background-color: #dc2626;
        }

        .step-active-blue .progress-text {
            color: #b91c1c;
        }

        .step-active-purple .progress-circle {
            background-color: #f87171;
        }

        .step-active-purple .progress-text {
            color: #dc2626;
        }

        .step-active-green .progress-circle {
            background-color: #dc2626;
        }

        .step-active-green .progress-text {
            color: #991b1b;
        }

        .step-inactive {
            opacity: 0.5;
        }

            .step-inactive .progress-circle {
                background-color: #d1d5db;
                color: #6b7280;
            }

            .step-inactive .progress-text {
                color: #6b7280;
            }

        .detail-button {
            width: 100%;
            background-color: #f3f4f6;
            color: #6b7280;
            padding: 8px 16px;
            border-radius: 8px;
            font-weight: 500;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .detail-button:hover {
                background-color: #e5e7eb;
            }

        .stats-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 32px;
        }

        .stat-card {
            background: white;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.08);
            display: flex;
            align-items: center;
            gap: 16px;
            transition: all 0.3s ease;
        }

            .stat-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 20px rgba(0,0,0,0.12);
            }

        .stat-icon {
            width: 48px;
            height: 48px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
        }

            .stat-icon svg {
                width: 24px;
                height: 24px;
            }

        .stat-pending .stat-icon {
            background: linear-gradient(135deg, #fca5a5, #ef4444);
        }

        .stat-preparing .stat-icon {
            background: linear-gradient(135deg, #dc2626, #b91c1c);
        }

        .stat-content h3 {
            font-size: 2rem;
            font-weight: bold;
            color: #1f2937;
            margin: 0 0 4px 0;
        }

        .stat-content p {
            color: #6b7280;
            font-size: 0.875rem;
            margin: 0;
            font-weight: 500;
        }

        @@media (max-width: 768px) {
            .header h1 {
                font-size: 2rem;
            }

            .orders-grid {
                grid-template-columns: 1fr;
            }

            .stats-container {
                grid-template-columns: repeat(2, 1fr);
                gap: 12px;
            }

            .stat-card {
                padding: 16px;
            }

            .stat-icon {
                width: 40px;
                height: 40px;
            }

                .stat-icon svg {
                    width: 20px;
                    height: 20px;
                }

            .stat-content h3 {
                font-size: 1.5rem;
            }

            .stat-content p {
                font-size: 0.8rem;
            }
        }
    </style>
}
@section scripts_header{
    <script>
        const context = {
            companySlug: '@ViewBag.CompanySlug',
            imagePath: '@ConfigurationManager.AppSettings["ProductImageUploadPath"]'
        }
    </script>
}
<div class="section">
    <!-- Header -->
    <div class="text-center mb-8" style="text-align: center; margin-bottom: 20px;">
        <h1 class="">🍽️ Đơn Đặt Hàng</h1>
        <p class="">Theo dõi trạng thái đơn hàng của bạn</p>
    </div>

    <div class="admin-control">
        <div class="admin-control-left">
            <div>
                <select ng-model="selectedTableId">
                    <option value="">Tất cả bàn</option>
                    <option ng-repeat="item in data.support.tables" value="{{item.tableId}}">{{item.tableName}}</option>
                </select>
            </div>

        </div>
        <div class="admin-control-center">
            <form action="" class="form-search">
                <span class="search-btn"><i class="fa-light fa-magnifying-glass"></i></span>
                <input ng-model="searchText" type="text" class="form-search-input" placeholder="Tìm kiếm mã đơn, khách hàng...">
            </form>
        </div>
        <div class="admin-control-right">
            <button ng-click=""
                    id="btnEnableNotificationOfOrder"
                    style="width: 66px "
                    class="btn-reset-order">
                <i class="fa-light fa-bells"></i>
            </button>
            <button ng-click="events.onReloadOrder($event)"
                    style="width: 133px"
                    class="btn-reset-order">
                <i class="fa-light fa-arrow-rotate-right"></i> Tải lại trang
            </button>
        </div>
    </div>
    <!-- Statistics -->
    <div class="stats-container">
        <div class="stat-card stat-pending">
            <div class="stat-icon">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
            </div>
            <div class="stat-content">
                <h3 ng-bind="methods.countWaitingConfirmOrders(data.orders)"></h3>
                <p>Đơn chờ xác nhận</p>
            </div>
        </div>

        <div class="stat-card stat-preparing">
            <div class="stat-icon">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z"></path>
                </svg>
            </div>
            <div class="stat-content">
                <h3 ng-bind="methods.countWaitingPaymentOrders(data.orders)"></h3>
                <p>Đơn chờ thanh toán</p>
            </div>
        </div>
    </div>
    <!-- Orders List -->
    <div class="orders-grid">
        <!-- Order 1 -->
        <div ng-repeat="item in data.orders | filter: searchText | filter:{ tableId: selectedTableId }" class="order-card">
            <div class="order-header">
                <div class="order-info">
                    <h3 ng-bind="'#' + item.orderId"></h3>
                    <a href="/Admin/AdminTable/TableOfCurrentOrderList?tableId={{item.tableId}}&tableToken={{item.tableToken}}"
                       ng-click="events.onLinkClick($event)">
                        <p style="display:inline">
                            <svg class="table-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z"></path>
                            </svg>
                            <span ng-class="item.isFinish ? 'table-number-black' : 'table-number-red'"
                                  class="table-number" ng-bind="item.tableName"></span>
                        </p>
                    </a>
                </div>
                <div ng-bind-html="methods.getOrderStatus(item)"
                     ng-class="item.isFinish ? 'status-finish' : 'status-pending'"
                     class="status-badge">
                </div>
            </div>

            <div class="time-info">
                <svg class="time-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <span ng-bind="'Đặt vào lúc ' + methods.getHourMinute(item.orderDate)"></span>
            </div>

            <!-- Status Progress -->
            <div class="progress-grid">
                <div ng-class="item.isConfirm ? 'step-inactive' : 'step-active-green'"
                     class="progress-step">
                    <div ng-bind="item.isConfirm ? '✓' : '1'"
                         class="progress-circle">1</div>
                    <p ng-bind="item.isConfirm ? 'Đã xác nhận' : 'Chờ xác nhận'"
                       class="progress-text"></p>
                </div>
                <div ng-class="item.isInProcess ? 'step-inactive' : 'step-active-green'"
                     class="progress-step">
                    <div ng-bind="item.isInProcess ? '✓' : '2'"
                         class="progress-circle">2</div>
                    <p ng-bind="item.isInProcess ? 'Đang sử lý' : 'Chờ sử lý'"
                       class="progress-text"></p>
                </div>
                <div ng-class="item.isDelivered ? 'step-inactive' : 'step-active-green'"
                     class="progress-step">
                    <div ng-bind="item.isDelivered ? '✓' : '3'"
                         class="progress-circle">3</div>
                    <p ng-bind="item.isDelivered ? 'Đã giao' : 'Chờ giao'"
                       class="progress-text"></p>
                </div>
                <div ng-class="item.isFinish ? 'step-inactive' : 'step-active-green'"
                     class="progress-step">
                    <div ng-bind="item.isFinish ? '✓' : '4'"
                         class="progress-circle">4</div>
                    <p ng-bind="item.isFinish ? 'Thanh toán' : 'Chờ thanh toán'"
                       class="progress-text"></p>
                </div>
            </div>

            <button ng-click="events.onOpenModelOrder($event, item)"
                    class="detail-button">
                Xem chi tiết
            </button>
        </div>
    </div>
</div>
<div class="modal detail-order">
    <div class="modal-container">
        <h3 class="modal-container-title">CHI TIẾT ĐƠN HÀNG</h3>
        <button class="modal-close"><i class="fa-regular fa-xmark"></i></button>
        <div class="modal-detail-order">
            <div class="modal-detail-left">
                <div class="order-item-group">
                    <div ng-repeat="item in data.order.orderDetails" class="order-product">
                        <div class="order-product-left">
                            <img ng-src="{{item.fileId ? data.support.imagePath + item.fileId : '/assets/img/blank-image.png'}}" alt="">
                            <div class="order-product-info">
                                <h4>
                                    <input type="checkbox"
                                           ng-click="events.onDeliveredOrderDetail($index, item, $event)"
                                           ng-model="item.isDelivered" />
                                    <span ng-bind="item.productName"></span>
                                </h4>
                                <p ng-show="item.orderDetailNote != null"
                                   ng-bind="item.orderDetailNote"
                                   class="order-product-note">
                                </p>
                                <p ng-show="item.orderDetailNote == null"
                                   class="order-product-note">
                                    <i class="fa-light fa-pen"></i> Không có ghi chú
                                </p>
                                <p ng-bind="'SL: ' + item.orderDetailQuantity" class="order-product-quantity"></p>
                            </div>
                        </div>
                        <div class="order-product-right">
                            <div class="order-product-price">
                                <span ng-bind-html="item.productPrice | vnCurrency" class="order-product-current-price"></span>
                            </div>
                            <div>&nbsp;</div>
                            <div>
                                <button type="button"
                                        ng-click="events.onRemoveOrderDetail($index, item, $event)"
                                        class="btn-edit" style="float: right; background-color:white">
                                    <i class="fa-duotone fa-solid fa-xmark"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-detail-right">
                <ul class="detail-order-group">
                    <li class="detail-order-item">
                        <span class="detail-order-item-left"><i class="fa-light fa-bowl-food"></i> Tổng món</span>
                        <span ng-bind="data.order.orderDetails.length + ' món'" class="detail-order-item-right"></span>
                    </li>
                    <li class="detail-order-item">
                        <span class="detail-order-item-left"><i class="fa-light fa-table-picnic"></i> Bàn đặt</span>
                        <span @*ng-bind="data.order.tableName"*@ class="detail-order-item-right">
                            {{data.order.tableName}}
                            <a href="/{{data.support.companySlug}}?tableId={{data.order.tableId}}&tableToken={{data.order.tableToken}}" target="_blank">
                                <i class="fa-light fa-utensils"></i>
                            </a>
                        </span>

                    </li>
                    <li class="detail-order-item">
                        <span class="detail-order-item-left"><i class="fa-light fa-code"></i> Mã đơn</span>
                        <span ng-bind="'#' + data.order.orderId" class="detail-order-item-right"></span>
                    </li>
                    <li class="detail-order-item">
                        <span class="detail-order-item-left"><i class="fa-light fa-calendar-days"></i> Ngày đặt</span>
                        <span ng-bind="data.order.orderDate | formatDateTime" class="detail-order-item-right"></span>
                    </li>
                </ul>
            </div>
        </div>
        <div class="modal-detail-bottom">
            <div class="modal-detail-bottom-left">
                <div class="price-total">
                    <span class="thanhtien">Thành tiền</span>
                    <span ng-bind-html="methods.totalPriceForOrder(data.order) | vnCurrency" class="price"></span>
                </div>
            </div>
            <div class="modal-detail-bottom-right">
                <button ng-hide="data.order.isConfirm == true"
                        ng-click="events.onOrderConfirm(data.order, $event)"
                        class="modal-detail-btn btn-chuaxuly">
                    Xác nhận đơn
                </button>
                <button ng-hide="data.order.isInProcess == true || data.order.isConfirm != true"
                        ng-click="events.onOrderInProcess(data.order, $event)"
                        class="modal-detail-btn btn-chuaxuly">
                    Đang sử lý
                </button>
                <button ng-hide="data.order.isDelivered == true || data.order.isInProcess != true"
                        ng-click="events.onOrderDelivered(data.order, $event)"
                        class="modal-detail-btn btn-chuaxuly">
                    Đã giao
                </button>
                <button ng-click="events.onChangeStatusToFinish(data.order, $event)"
                        ng-hide="data.order.isFinish || data.order.isConfirm != true || data.order.isInProcess != true|| data.order.isDelivered != true"
                        class="modal-detail-btn btn-daxuly">
                    Hoàn thành đơn
                </button>
                <span ng-show="data.order.isFinish" class="status-order-finish">Đã hoàn thành</span>
                <button ng-show="data.order.isFinish"
                        ng-click="events.onRestoreOrder(data.order, $event)"
                        class="btn-edit">
                    <i class="fa-light fa-arrow-rotate-right"></i>
                </button>
            </div>
        </div>

    </div>
</div>
@section scripts_footer {
    <script>
        app.controller("mainCtrl", function ($scope, $http) {
            $scope.data = {
                support: {
                    imagePath: context.imagePath,
                    companySlug: context.companySlug
                }
            }

            $scope.init = function () {
                $scope.methods.loadInit();
            };

            $scope.events = {
                onOpenModelOrder: async function ($event, order) {
                    const button = $event.currentTarget;
                    shareData.loadButton.loading(button, true);

                    $scope.data.order = order;
                    $scope.data.order.orderDetails = await $scope.methods.getOrderDetails(order.orderId);
                    $scope.$apply();

                    document.querySelector(".detail-order").classList.add("open");
                    shareData.loadButton.loaded(button);
                    //console.log('$scope.data.order', $scope.data.order);
                },
                onRemoveOrderDetail: async function (index, orderDetail, $event) {
                    if (!confirm('Nếu bạn muốn xóa món này!\nNhấn OK hoặc Cancel để trở lại.')) {
                        return;
                    }
                    const button = $event.currentTarget;
                    shareData.loadButton.loading(button, false);

                    let result = false;
                    result = await $scope.methods.removeOrderDetail(orderDetail.orderDetailId);
                    if (result) {
                        $scope.data.order.orderDetails.splice(index, 1);
                        $scope.$apply();
                    }
                    shareData.loadButton.loaded(button);
                },
                onChangeStatusToFinish: async function (order, $event) {
                    const button = $event.currentTarget;
                    shareData.loadButton.loading(button, true);

                    let result = false;
                    result = await $scope.methods.changeStatusToFinish(order.orderId);
                    if (result) {
                        $scope.data.order.isFinish = true;
                        $scope.$apply();
                    }
                    shareData.loadButton.loaded(button);
                },
                onOrderConfirm: async function (order, $event) {
                    const button = $event.currentTarget;
                    shareData.loadButton.loading(button, true);

                    let result = false;
                    result = await $scope.methods.orderConfirm(order.orderId);
                    if (result) {
                        $scope.data.order.isConfirm = true;
                        $scope.$apply();
                    }
                    shareData.loadButton.loaded(button);
                },
                onOrderInProcess: async function (order, $event) {
                    const button = $event.currentTarget;
                    shareData.loadButton.loading(button, true);

                    let result = false;
                    result = await $scope.methods.orderInProcess(order.orderId);
                    if (result) {
                        $scope.data.order.isInProcess = true;
                        $scope.$apply();
                    }
                    shareData.loadButton.loaded(button);
                },
                onOrderDelivered: async function (order, $event) {
                    const button = $event.currentTarget;
                    shareData.loadButton.loading(button, true);

                    let result = false;
                    result = await $scope.methods.orderDelivered(order.orderId);
                    if (result) {
                        $scope.data.order.isDelivered = true;
                        $scope.$apply();
                    }
                    shareData.loadButton.loaded(button);
                },
                onRestoreOrder: async function (order, $event) {
                    const button = $event.currentTarget;
                    shareData.loadButton.loading(button, false);

                    let result = false;
                    result = await $scope.methods.restoreOrder(order.orderId);
                    if (result) {
                        $scope.data.order.isFinish = false;
                        $scope.$apply();
                    }
                    shareData.loadButton.loaded(button);
                },
                onReloadOrder: function ($event) {
                    const button = $event.currentTarget;
                    shareData.loadButton.loading(button, false);

                    $scope.methods.loadInit(button)
                },
                onDeliveredOrderDetail: async function (index, orderDetail, $event) {
                    const checkbox = $event.currentTarget;
                    checkbox.disabled = true;
                    const oldValue = orderDetail.isDelivered;
                    const newValue = !oldValue;

                    let result = false;
                    result = await $scope.methods.deliveredOrderDetail(orderDetail.orderDetailId);
                    if (result) {
                        $scope.data.order.orderDetails[index].isDelivered = newValue;
                    }
                    else {
                        $scope.data.order.orderDetails[index].isDelivered = oldValue;
                    }
                    $scope.$apply();
                    checkbox.disabled = false;
                },
                onLinkClick: function ($event) {
                    $event.preventDefault();
                    const button = $event.currentTarget;
                    shareData.loadButton.loading(button, true);
                    window.location.href = $event.currentTarget.href;
                }
            };
            $scope.methods = {
                loadInit: function (button) {
                    $http({
                        url: '/api/admin/order/get-all',
                        method: "Get"
                    })
                        .then(function (response) {
                            //console.log('data', response.data);
                            $scope.data.orders = response.data.orders;
                            $scope.data.support.tables = response.data.tables;
                        })
                        .catch(function (response) {
                            shareData.notification.exception();
                            console.error('catch error', response);
                        })
                        .finally(function () {
                            document.getElementById('pageLoader').style.display = 'none';
                            if (button != null) {
                                shareData.loadButton.loaded(button);
                            }
                        });
                },
                update: function (data, button) {

                    $http({
                        url: '/api/admin/table/update',
                        method: "POST",
                        data: data
                    })
                        .then(function (response) {
                            if (response.data.success == true) {
                                if (response.data?.objectResponses?.id > 0) {
                                    $scope.data.table.tableId = response.data.objectResponses.id;
                                }
                                $scope.methods.loadInit(button);
                            }
                            else {
                                shareData.notification.fail(response.data.messageForUser)
                                console.error('response error', response)
                            }
                        })
                        .catch(function (response) {
                            shareData.notification.exception();
                            console.error('catch error', response);
                        })
                        .finally(function () {

                        });
                },
                getOrderDetails: async function (orderId) {
                    return await $http({
                        url: '/api/admin/order/get-order-details?orderId=' + orderId,
                        method: "Get"
                    })
                        .then(function (response) {
                            return response.data.orderDetails;
                        })
                        .catch(function (response) {
                            shareData.notification.exception();
                            console.error('catch error', response);
                        })
                        .finally(function () {

                        });
                },
                removeOrderDetail: async function (orderDetailId) {
                    return await $http({
                        url: '/api/admin/order/remove-order-detail?orderDetailId=' + orderDetailId,
                        method: "Post"
                    })
                        .then(function (response) {
                            if (response.data.success == true) {
                                return true;
                            }
                            else {
                                shareData.notification.fail(response.data.messageForUser)
                                console.error('response error', response)
                            }
                            return false;
                        })
                        .catch(function (response) {
                            shareData.notification.exception();
                            console.error('catch error', response);
                        })
                        .finally(function () {

                        });
                },
                changeStatusToFinish: async function (orderId) {
                    return await $http({
                        url: '/api/admin/order/change-status-to-finish?orderId=' + orderId,
                        method: "Post"
                    })
                        .then(function (response) {
                            if (response.data.success == true) {
                                return true;
                            }
                            else {
                                shareData.notification.fail(response.data.messageForUser)
                                console.error('response error', response)
                            }
                            return false;
                        })
                        .catch(function (response) {
                            shareData.notification.exception();
                            console.error('catch error', response);
                        })
                        .finally(function () {

                        });
                },
                orderConfirm: async function (orderId) {
                    return await $http({
                        url: '/api/admin/order/order-confirm?orderId=' + orderId,
                        method: "Post"
                    })
                        .then(function (response) {
                            if (response.data.success == true) {
                                return true;
                            }
                            else {
                                shareData.notification.fail(response.data.messageForUser)
                                console.error('response error', response)
                            }
                            return false;
                        })
                        .catch(function (response) {
                            shareData.notification.exception();
                            console.error('catch error', response);
                        })
                        .finally(function () {

                        });
                },
                orderInProcess: async function (orderId) {
                    return await $http({
                        url: '/api/admin/order/order-in-process?orderId=' + orderId,
                        method: "Post"
                    })
                        .then(function (response) {
                            if (response.data.success == true) {
                                return true;
                            }
                            else {
                                shareData.notification.fail(response.data.messageForUser)
                                console.error('response error', response)
                            }
                            return false;
                        })
                        .catch(function (response) {
                            shareData.notification.exception();
                            console.error('catch error', response);
                        })
                        .finally(function () {

                        });
                },
                orderDelivered: async function (orderId) {
                    return await $http({
                        url: '/api/admin/order/order-delivered?orderId=' + orderId,
                        method: "Post"
                    })
                        .then(function (response) {
                            if (response.data.success == true) {
                                return true;
                            }
                            else {
                                shareData.notification.fail(response.data.messageForUser)
                                console.error('response error', response)
                            }
                            return false;
                        })
                        .catch(function (response) {
                            shareData.notification.exception();
                            console.error('catch error', response);
                        })
                        .finally(function () {

                        });
                },
                restoreOrder: async function (orderId) {
                    return await $http({
                        url: '/api/admin/order/restore-order?orderId=' + orderId,
                        method: "Post"
                    })
                        .then(function (response) {
                            if (response.data.success == true) {
                                return true;
                            }
                            else {
                                shareData.notification.fail(response.data.messageForUser)
                                console.error('response error', response)
                            }
                            return false;
                        })
                        .catch(function (response) {
                            shareData.notification.exception();
                            console.error('catch error', response);
                        })
                        .finally(function () {

                        });
                },
                totalPriceForOrder: function (order) {
                    let total = 0;
                    if (order != null && order.orderDetails != null) {
                        for (item of order.orderDetails) {
                            total += (item.productPrice * item.orderDetailQuantity);
                        }
                    }
                    return total;
                },
                getHourMinute: function (date) {
                    if (!(date instanceof Date)) {
                        date = new Date(date); // ép nếu là chuỗi hoặc timestamp
                    }
                    let hours = date.getHours().toString().padStart(2, '0');
                    let minutes = date.getMinutes().toString().padStart(2, '0');
                    return `${hours}:${minutes}`;
                },
                getOrderStatus: function (order) {
                    if (order.isFinish) return "✓ Hoàn tất đơn";
                    if (order.isDelivered) return "<div class=\'status-dot\'></div> Đã giao";
                    if (order.isInProcess) return "<div class=\'status-dot\'></div> Đang chuẩn bị";
                    if (order.isConfirm) return "<div class=\'status-dot\'></div> Đã xác nhận";
                    return "<div class=\'status-dot\'></div> Chờ xác nhận";
                },
                // Đếm số đơn chờ xác nhận
                countWaitingConfirmOrders: function (orders) {
                    if (!orders || !orders.length) return 0;
                    return orders.filter(order => !order.isConfirm).length;
                },
                // Đếm số đơn chờ thanh toán
                countWaitingPaymentOrders: function (orders) {
                    if (!orders || !orders.length) return 0;
                    return orders.filter(order => order.isConfirm && !order.isFinish).length;
                },
                deliveredOrderDetail: async function (orderDetailId) {
                    return await $http({
                        url: '/api/admin/order/delivered-order-detail?orderDetailId=' + orderDetailId,
                        method: "Post"
                    })
                        .then(function (response) {
                            if (response.data.success == true) {
                                return true;
                            }
                            else {
                                shareData.notification.fail(response.data.messageForUser)
                                console.error('response error', response)
                            }
                            return false;
                        })
                        .catch(function (response) {
                            shareData.notification.exception();
                            console.error('catch error', response);
                        })
                        .finally(function () {

                        });
                },
            };
            $scope.init();
        });
    </script>
}
