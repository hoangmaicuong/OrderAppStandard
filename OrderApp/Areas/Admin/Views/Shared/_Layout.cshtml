﻿@using Microsoft.AspNet.Identity
@{
    var currentController = ViewContext.RouteData.Values["controller"].ToString();
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href='/assets/img/favicon.png' rel='icon' type='image/x-icon' />
    <link rel="stylesheet" href="~/assets/css/admin.css">
    <link rel="stylesheet" href="~/assets/css/toast-message.css">
    <link href="~/assets/font/font-awesome-pro-v6-6.2.0/css/all.min.css" rel="stylesheet" type="text/css" />
    <link rel="stylesheet" href="~/assets/css/admin-responsive.css">
    <title>@ViewBag.Title</title>
    <script src="~/Scripts/angular.min.js"></script>
    <script src="~/Scripts/angular-sanitize.min.js"></script>
    <script src="~/Scripts/angular-animate.min.js"></script>
    @RenderSection("css_header", required: false)
    @RenderSection("scripts_header", required: false)
    <style>
        /*angularjs animate*/
        /*ng-repeat*/
        .ng-enter {
            transition: 0.5s linear all;
            opacity: 0;
        }

        .ng-enter-active {
            opacity: 1;
        }
    </style>
    <script>
    const shareData = {
        newId: 0,
        isAuthenticated : '@Request.IsAuthenticated' == 'True',
        searchKey: '',
        productCategoryId: 0,
        pageUrl: {
            indexHomePageForSearch: '@Url.Action("Index", "Home", new { searchKey = "_searchKey" })'.replace('_searchKey', ''),
            indexHomePageForProductCategory: '@Url.Action("Index", "Home", new { productCategoryId = "_productCategoryId" })'.replace('_productCategoryId', '')

        },
        loadButton: {
            rootText: '',
            loading: function (button, isShowRootText) {
                this.rootText = button.innerHTML;
                //--
                let text = '';
                if (isShowRootText) {
                    text = button.innerHTML;
                }
                button.disabled = true;
                button.innerHTML = `<i class="fa-solid fa-loader fa-spin fa-spin-reverse"></i> ${text}`;
            },
            loaded: function (button) {
                button.disabled = false;
                button.innerHTML = this.rootText;
                //--
                this.rootText = '';
            }
        },
        notification: {
            messageExceptionAPI: '@Html.Raw(Support.ResponsesAPI.MessageAPI.messageException)',
            fail: function (message) {
                alert(`⚠️@Html.Raw(Support.ResponsesAPI.MessageAPI.failTitle)! ${message}`)
            },
            exception: function () {
                alert('⚠️' + shareData.notification.messageExceptionAPI)
            }
        }
    }
    </script>
</head>

<body>
    <div ng-app="appAdmin">
        <header class="header">
            <button class="menu-icon-btn">
                <div class="menu-icon">
                    <i class="fa-regular fa-bars"></i>
                </div>
            </button>
        </header>
        <div class="container">
            <aside class="sidebar open">
                <div class="top-sidebar">
                    <a href="@Url.Action("Index","AdminHome", new {area = "Admin"})" class="channel-logo"><img src="~/assets/img/favicon.png" alt="Channel Logo"></a>
                    <div class="hidden-sidebar your-channel">
                        <img src="/assets/img/admin/vy-food-title.png"
                             style="height: 30px;" alt="">
                    </div>
                </div>
                <div class="middle-sidebar">
                    <ul class="sidebar-list">
                        <li class="sidebar-list-item tab-content @(currentController == "AdminHome" ? "active" : "")">
                            <a href="@Url.Action("Index", "AdminHome", new {area = "Admin"})" class="sidebar-link">
                                <div class="sidebar-icon"><i class="fa-light fa-house"></i></div>
                                <div class="hidden-sidebar">Tổng quan</div>
                            </a>
                        </li>
                        <li class="sidebar-list-item tab-content @(currentController == "AdminOrder" ? "active" : "")">
                            <a href="@Url.Action("Index", "AdminOrder", new {area = "Admin"})" class="sidebar-link">
                                <div class="sidebar-icon"><i class="fa-light fa-basket-shopping"></i></div>
                                <div class="hidden-sidebar">Đơn hàng</div>
                            </a>
                        </li>
                        <li class="sidebar-list-item tab-content @(currentController == "AdminTable" ? "active" : "")">
                            <a href="@Url.Action("Index", "AdminTable", new {area = "Admin"})" class="sidebar-link">
                                <div class="sidebar-icon"><i class="fa-light fa-table-picnic"></i></div>
                                <div class="hidden-sidebar">Các bàn</div>
                            </a>
                        </li>
                        <li class="sidebar-list-item tab-content @(currentController == "AdminProduct" ? "active" : "")">
                            <a href="@Url.Action("Index", "AdminProduct", new {area = "Admin"})" class="sidebar-link">
                                <div class="sidebar-icon"><i class="fa-light fa-pot-food"></i></div>
                                <div class="hidden-sidebar">Sản phẩm</div>
                            </a>
                        </li>
                        <li class="sidebar-list-item tab-content @(currentController == "AdminCategory" ? "active" : "")">
                            <a href="@Url.Action("Index", "AdminCategory", new {area = "Admin"})" class="sidebar-link">
                                <div class="sidebar-icon"><i class="fa-light fa-layer-group"></i></div>
                                <div class="hidden-sidebar">Loại Sản Phẩm</div>
                            </a>
                        </li>
                        <li class="sidebar-list-item tab-content @(currentController == "AdminAccount" ? "active" : "")">
                            <a href="@Url.Action("Index", "AdminAccount", new {area = "Admin"})" class="sidebar-link">
                                <div class="sidebar-icon"><i class="fa-light fa-users"></i></div>
                                <div class="hidden-sidebar">Khách hàng</div>
                            </a>
                        </li>
                        <li class="sidebar-list-item tab-content @(currentController == "AdminReport" ? "active" : "")">
                            <a href="@Url.Action("Index", "AdminReport", new {area = "Admin"})" class="sidebar-link">
                                <div class="sidebar-icon"><i class="fa-light fa-chart-simple"></i></div>
                                <div class="hidden-sidebar">Thống kê</div>
                            </a>
                        </li>
                    </ul>
                </div>
                <div class="bottom-sidebar">
                    <ul class="sidebar-list">
                        <li class="sidebar-list-item user-logout">
                            <a href="/" class="sidebar-link">
                                <div class="sidebar-icon"><i class="fa-thin fa-circle-chevron-left"></i></div>
                                <div class="hidden-sidebar">Trang chủ</div>
                            </a>
                        </li>
                        <li class="sidebar-list-item user-logout">
                            <a href="#" class="sidebar-link">
                                <div class="sidebar-icon"><i class="fa-light fa-circle-user"></i></div>
                                <div class="hidden-sidebar" @*id="name-acc"*@>
                                    Account:
                                    @if (Request.IsAuthenticated)
                                    {@User.Identity.GetUserName()}
                                </div>

                            </a>
                        </li>
                        <li class="sidebar-list-item user-logout">
                            @using (Html.BeginForm("LogOff", "AccountManage", new { area = "" }, FormMethod.Post, new { id = "logoutForm", @class = "" }))
                            {
                                @Html.AntiForgeryToken()
                                <a class="sidebar-link" @*id="logout-acc"*@ href="javascript:document.getElementById('logoutForm').submit()">
                                    <div class="sidebar-icon"><i class="fa-light fa-arrow-right-from-bracket"></i></div>
                                    <div class="hidden-sidebar">Đăng xuất</div>
                                </a>

                                @*<a href="#" class="sidebar-link" id="logout-acc">
                                    <div class="sidebar-icon"><i class="fa-light fa-arrow-right-from-bracket"></i></div>
                                    <div class="hidden-sidebar">Đăng xuất</div>
                                </a>*@
                            }

                        </li>
                    </ul>
                </div>
            </aside>
            <main class="content" ng-controller="mainCtrl">
                @RenderBody()
            </main>
        </div>
        <div class="modal detail-order-product">
            <div class="modal-container">
                <button class="modal-close"><i class="fa-regular fa-xmark"></i></button>
                <div class="table">
                    <table width="100%">
                        <thead>
                            <tr>
                                <td>Mã đơn</td>
                                <td>Số lượng</td>
                                <td>Đơn giá</td>
                                <td>Ngày đặt</td>
                            </tr>
                        </thead>
                        <tbody id="show-product-order-detail">
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="modal signup">
            <div class="modal-container">
                <h3 class="modal-container-title add-account-e">THÊM KHÁCH HÀNG MỚI</h3>
                <h3 class="modal-container-title edit-account-e">CHỈNH SỬA THÔNG TIN</h3>
                <button class="modal-close"><i class="fa-regular fa-xmark"></i></button>
                <div class="form-content sign-up">
                    <form action="" class="signup-form">
                        <div class="form-group">
                            <label for="fullname" class="form-label">Tên đầy đủ</label>
                            <input id="fullname" name="fullname" type="text" placeholder="VD: Nhật Sinh" class="form-control">
                            <span class="form-message-name form-message"></span>
                        </div>
                        <div class="form-group">
                            <label for="phone" class="form-label">Số điện thoại</label>
                            <input id="phone" name="phone" type="text" placeholder="Nhập số điện thoại" class="form-control">
                            <span class="form-message-phone form-message"></span>
                        </div>
                        <div class="form-group">
                            <label for="password" class="form-label">Mật khẩu</label>
                            <input id="password" name="password" type="text" placeholder="Nhập mật khẩu" class="form-control">
                            <span class="form-message-password form-message"></span>
                        </div>
                        <div class="form-group edit-account-e">
                            <label for="" class="form-label">Trạng thái</label>
                            <input type="checkbox" id="user-status" class="switch-input">
                            <label for="user-status" class="switch"></label>
                        </div>
                        <button class="form-submit add-account-e" id="signup-button">Đăng ký</button>
                        <button class="form-submit edit-account-e" id="btn-update-account"><i class="fa-regular fa-floppy-disk"></i> Lưu thông tin</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    
    <div id="toast"></div>
    <script src="/assets/js/admin.js"></script>
    <script src="/assets/js/toast-message.js"></script>
    <script>
        const app = angular.module("appAdmin", ['ngSanitize', 'ngAnimate']);
    </script>
    @RenderSection("scripts_footer", required: false)
    <script>
        //filter Dùng chung angularjs
        app.filter('vnCurrency', function () {
            return function (input) {
                if (isNaN(input)) {
                    return '0'; // Giá trị mặc định nếu input không hợp lệ
                }
                return parseFloat(input)
                    .toFixed(0) // Làm tròn đến số nguyên
                    .replace(/\B(?=(\d{3})+(?!\d))/g, '.') + '&nbsp;₫'; // Thêm dấu chấm phân cách hàng nghìn
            };
        });
        app.filter('vnNumber', function () {
            return function (input) {
                if (isNaN(input)) {
                    return '0'; // Giá trị mặc định nếu input không hợp lệ
                }
                return parseFloat(input)
                    .toFixed(0) // Làm tròn đến số nguyên
                    .replace(/\B(?=(\d{3})+(?!\d))/g, '.'); // Thêm dấu chấm phân cách hàng nghìn
            };
        });
        app.filter('formatDateTime', function () {
            return function (input) {
                if (!input) return '';

                // Chuyển đổi chuỗi ngày thành đối tượng Date
                const date = new Date(input);

                // Kiểm tra nếu không hợp lệ
                if (isNaN(date.getTime())) return '';

                // Lấy thông tin ngày, tháng, năm, giờ và phút
                const day = date.getDate().toString().padStart(2, '0'); // Đảm bảo ngày có 2 chữ số
                const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Tháng bắt đầu từ 0
                const year = date.getFullYear();
                const hours = date.getHours().toString().padStart(2, '0');
                const minutes = date.getMinutes().toString().padStart(2, '0');

                // Trả về chuỗi định dạng
                return `${day}/${month}/${year} vào lúc ${hours}:${minutes}`;
            };
        });

        app.directive('formatNumberInput', ['$filter', function ($filter) {
            return {
                restrict: 'A',
                require: 'ngModel',
                link: function (scope, element, attrs, ngModelCtrl) {
                    const vnNumberFilter = $filter('vnNumber');

                    // Định dạng giá trị hiển thị
                    function formatNumber(value) {
                        if (!value && value !== 0) return '';
                        return vnNumberFilter(value);
                    }

                    // Loại bỏ định dạng để lấy giá trị thực (số)
                    function parseNumber(value) {
                        if (!value) return 0;

                        // Bỏ khoảng trắng + ký tự không phải số, dấu . , hoặc -
                        value = value.replace(/[^\d,.-]/g, '');

                        // Bỏ dấu chấm phân cách nghìn
                        value = value.replace(/\./g, '');

                        // Đổi dấu phẩy thành dấu chấm để parseFloat hiểu phần thập phân
                        value = value.replace(',', '.');

                        // Trả về số
                        return parseFloat(value) || 0;
                    }

                    // Hiển thị giá trị đã định dạng trong input
                    ngModelCtrl.$formatters.push(function (value) {
                        return formatNumber(value);
                    });

                    // Khi người dùng nhập vào, vẫn giữ định dạng
                    ngModelCtrl.$parsers.push(function (value) {
                        const rawValue = parseNumber(value);
                        element.val(formatNumber(rawValue)); // Hiển thị lại giá trị đã định dạng
                        return rawValue; // Lưu giá trị thực vào ngModel
                    });

                    // Xử lý khi người dùng blur hoặc thay đổi giá trị
                    element.on('blur', function () {
                        const formattedValue = formatNumber(ngModelCtrl.$modelValue);
                        element.val(formattedValue); // Cập nhật giá trị đã định dạng
                    });

                    // Xử lý ngay khi người dùng gõ để cập nhật định dạng liên tục
                    element.on('input', function () {
                        const rawValue = parseNumber(element.val());
                        element.val(formatNumber(rawValue)); // Hiển thị giá trị đã định dạng
                    });
                }
            };
        }]);
        app.directive('formatPhoneInput', ['$filter', function ($filter) {
            return {
                restrict: 'A',
                require: 'ngModel',
                link: function (scope, element, attrs, ngModelCtrl) {
                    function formatPhoneNumber(value) {
                        if (!value) return '';
                        var cleaned = value.replace(/\D/g, ''); // bỏ ký tự không phải số

                        // Định dạng 4-3-3 (VD: 0123-345-678)
                        if (cleaned.length <= 4) {
                            return cleaned;
                        } else if (cleaned.length <= 7) {
                            return cleaned.slice(0, 4) + '-' + cleaned.slice(4);
                        } else {
                            return cleaned.slice(0, 4) + '-' + cleaned.slice(4, 7) + '-' + cleaned.slice(7, 10);
                        }
                    }

                    ngModelCtrl.$parsers.push(function (value) {
                        var formatted = formatPhoneNumber(value || '');
                        ngModelCtrl.$setViewValue(formatted);
                        ngModelCtrl.$render();
                        return formatted.replace(/\D/g, ''); // trả về chuỗi số thuần cho model
                    });

                    element.on('input', function () {
                        var value = element.val();
                        var formatted = formatPhoneNumber(value);
                        ngModelCtrl.$setViewValue(formatted);
                        ngModelCtrl.$render();
                    });
                }
            };
        }]);
    </script>
</body>
</html>